#labels Featured
待编辑

== wine的安装 ==

=== 二进制包安装 ===
大部分发行版的软件仓库都有wine的二进制包,
以Ubuntu为例,可以用
`sudo apt-get install wine` 来安装.
但是wine的发展很快,软件仓库中的不是最新版本,建议使用ppa中的版本:
用下面一行命令可以安装ppa版本的最新的wine1.3
$ sudo add-apt-repository ppa:ubuntu-wine/ppa ; sudo apt-get update ;
sudo apt-get install wine1.3
参见: http://www.winehq.org/download/

1.2 假设已经添加了wine的ppa源,并且希望对wine做一些调试,那么最好安装wine1.3-dbg
$ sudo apt-get install wine1.3-dbg
装了这个之后,如果以后从终端启动wine应用程序,出现崩溃的时候,终端输出的记录里会详细记录是
哪一个源文件的哪一行代码引起崩溃(段错误)

1.3 从源代码编译
如果想要自己阅读/修改代码或者应用一些非官方补丁,就需要下载wine的源代码
详见: http://wiki.winehq.org/GitWine
简单的过程如下:
$ git clone git://source.winehq.org/git/wine.git ~/wine-git
$ sudo apt-get build-dep wine
$ cd ~/wine-git
$ ./tools/wineinstall
到这一步会出现提示,选择yes先编译后安装,选择no只编译不安装

1.4 从源代码编译wine-gecko
wine使用gecko(firefox的内核,参见http://en.wikipedia.org/wiki/Gecko )
作为浏览器内核,重新实现了一个内置的IE.
如果要测试最新的wine-gecko,可以参考:
wiki.winehq.org/BuildingWineGecko




2. wine的使用
理想情况下,安装了wine之后,安装和运行windows程序就跟在windows上一样,直接双击就ok.
但是,wine还很不理想 :)
尤其是,出于测试的目的的话,应该从终端运行wine应用程序,查看打印的输出内容.
例如,
wine something.exe
(小技巧:从桌面或文件夹里拖动应用程序到终端里,可以立刻得到完整的绝对路径)



2.0 使用winetricks安装程序
最新的wine1.3.14集成了新版的winetricks脚本,在wine的子菜单中可以看到,也可以从终端启动.
winetricks脚本可以用来快速地安装某些应用程序(例如IE6),也可以快速修改一些设置,具有图形界面,
很容易使用.winetricks脚本的源码值得阅读,可以作为一个切入点,迅速对wine有初步的了解.


2.1 关于wineprefix : 存放 wine 程序和dll 的文件夹
默认情况下,安装完wine,主文件夹下不会有关于wine的任何东西.
第一次运行wine应用程序,或者运行winecfg,或者运行wineboot(重启wine)等,
会在主文件夹下生成 .wine/ 隐藏文件夹,
.wine/下面有个drive_c , 基本上模拟了windows系统分区的文件结构:
$ tree -L 1
.
|-- Program Files
|-- users
|-- windows
`-- winetrickstmp

通过wine安装的程序都会放在这个文件夹的某个子目录下,跟windows一样.
一个用户通过wine安装应用程序,只会把程序解压到自己的家目录下的~/.wine
在别的用户的家目录下是没有的,也就是说,wine应用程序无法在不同用户间共享.

通过wine安装的程序,菜单会放在Applications/Wine的子菜单里.
更多,参考:
http://wiki.jswindle.com/index.php/Wine_Prefixes
通过指定WINEPREFIX环境变量,可以在一个用户主文件夹内使用多个独立的等同于
~/.wine的文件夹,最详细有用的实例是 winetricks脚本,后面会提到.
参见: http://wiki.winehq.org/winetricks

2.2.1 关于wine的dll : 原生(native) 和 内置(builtin)
native是指从Microsoft Windows上拷贝的商业版本的dll,
builtin是指wine项目重新实现的开源的dll

在使用wine运行程序时,遇到的最多的问题就是某个builtin dll不管用,一般情况下,
直接复制native dll到 windows/system32 文件夹是没有用的,需要在winecfg(图形界面)
里设置指定要用hative还是用builtin,或者使用 WINEDLLOVERRIDES 环境变量,
例如,
$ WINEDLLOVERRIDES="comdlg32,shell32=n,b" wine program_name
上面这句表示,comdlg32和shell32这两个dll,优先使用native的,如果native的不存在,就使用builtin的.

详细内容参见:http://ftp.winehq.org/pub/wine/docs/en/wineusr-guide.html#AEN309

wine的dll中,有一些是不能用native替换的,因为wine的底层dll和ms windows的底层dll不同.
这些包括:   kernel32.dll, gdi32.dll, user32.dll, and ntdll.dll, 如果尝试用图形界面的winecfg
修改这些dll的OVERRIDES属性会收到警告. 

2.2.2 wine的dll : 注册一个dll
某些dll需要注册才能使用,这时候,可以运行:
regsvr32 some.dll
常见的例子是网银的ActiveX控件,这些控件一般以*.cab形式的文件存放在网上,
可以用 cabextract 解压 .cab文件, 再用 regsvr32 注册解压得到的dll文件.


2.2.3 wine的buitin dll目前实现进度:
参见:
http://source.winehq.org/WineAPI/
http://www.winehq.org/status/dlls
http://www.winehq.org/winapi_stats
仅供参考,有些信息过时了,只有git下载的代码才是最新的


建议阅读wine官方的文档:
http://wiki.winehq.org/Developers